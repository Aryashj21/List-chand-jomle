class Node:
    def __init__(self, coeff, power):
        self.coeff = coeff
        self.power = power
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, coeff, power):
        new_node = Node(coeff, power)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node

    def display(self):
        current = self.head
        poly_str = ""
        while current:
            poly_str += f"{current.coeff}x^{current.power} "
            if current.next:
                poly_str += "+ "
            current = current.next
        print(poly_str)

def addPolynomials(poly1, poly2):
    p1 = poly1.head
    p2 = poly2.head
    result = LinkedList()

    while p1 and p2:
        if p1.power > p2.power:
            result.append(p1.coeff, p1.power)
            p1 = p1.next
        elif p1.power < p2.power:
            result.append(p2.coeff, p2.power)
            p2 = p2.next
        else:
            result.append(p1.coeff + p2.coeff, p1.power)
            p1 = p1.next
            p2 = p2.next

    while p1:
        result.append(p1.coeff, p1.power)
        p1 = p1.next

    while p2:
        result.append(p2.coeff, p2.power)
        p2 = p2.next

    return result

def multiplyPolynomials(poly1, poly2):
    p1 = poly1.head
    result = LinkedList()
    
    while p1:
        temp = LinkedList()
        p2 = poly2.head
        while p2:
            temp.append(p1.coeff * p2.coeff, p1.power + p2.power)
            p2 = p2.next
        result = addPolynomials(result, temp)
        p1 = p1
